MPC(1)       mpc       MPC(1)

NAME
       mpc - mpc Documentation

DESCRIPTION
       mpc  is a command-line client for the Music Player Daemon (MPD).  It connects to a MPD and controls it according to commands and arguments
       passed to it.  If no command is given, the current status is printed (same as "mpc status").

SYNOPSIS
          mpc [options] <command> [<arguments>]

OPTIONS
       -f,   format
		Configure the format used to display songs.
		The metadata delimiters are:

          ┌───────────────┬──────────────────────────────────────────────────┐
          │Name           │ Description                                      │
          ├───────────────┼──────────────────────────────────────────────────┤
          │%name%         │ A name for this song.  This is not the song  ti‐ │
          │               │ tle.  The  exact  meaning  of  this  tag  is not │
          │               │ well-defined. It is often used by badly  config‐ │
          │               │ ured internet radio stations with broken tags to │
          │               │ squeeze both the artist name and the song  title │
          │               │ in one tag.                                      │
          ├───────────────┼──────────────────────────────────────────────────┤
          │%artist%       │ Artist file tag                                  │
          ├───────────────┼──────────────────────────────────────────────────┤
          │%album%        │ Album file tag                                   │
          ├───────────────┼──────────────────────────────────────────────────┤
          │%albumartist%  │ Album Artist file tag                            │
          ├───────────────┼──────────────────────────────────────────────────┤
          │%comment%      │ Comment  file  tag  (not  enabled  by default in │
          │               │ mpd.conf's metadata_to_use)                      │
          ├───────────────┼──────────────────────────────────────────────────┤
          │%composer%     │ Composer file tag                                │
          ├───────────────┼──────────────────────────────────────────────────┤
          │%date%         │ Date file tag                                    │
          ├───────────────┼──────────────────────────────────────────────────┤
          │%originaldate% │ Original Date file tag                           │
          ├───────────────┼──────────────────────────────────────────────────┤
          │%disc%         │ Disc file tag                                    │
          ├───────────────┼──────────────────────────────────────────────────┤
          │%genre%        │ Genre file tag                                   │
          ├───────────────┼──────────────────────────────────────────────────┤
          │%performer%    │ Performer file tag                               │
          ├───────────────┼──────────────────────────────────────────────────┤
          │%title%        │ Title file tag                                   │
          ├───────────────┼──────────────────────────────────────────────────┤
          │%track%        │ Track file tag                                   │
          ├───────────────┼──────────────────────────────────────────────────┤
          │%time%         │ Duration of file                                 │
          ├───────────────┼──────────────────────────────────────────────────┤
          │%file%         │ Path of file, relative to MPD's  music_directory │
          │               │ variable                                         │
          ├───────────────┼──────────────────────────────────────────────────┤
          │%position%     │ Queue track number                               │
          ├───────────────┼──────────────────────────────────────────────────┤
          │%id%           │ Queue track id number                            │
          └───────────────┴──────────────────────────────────────────────────┘
          │%prio%         │ Priority in the (random) queue.                  │
          ├───────────────┼──────────────────────────────────────────────────┤
          │%mtime%        │ Date and time of last file modification          │
          ├───────────────┼──────────────────────────────────────────────────┤
          │%mdate%        │ Date of last file modification                   │
          └───────────────┴──────────────────────────────────────────────────┘

		The  [] operator is used to group output such that if no metadata delimiters are found or matched between [ and ], then none of the characters between [ and ] 			are output.  & and | are logical operators for and and or.  # is used to escape characters. 
		Some useful examples  for format are: "%file%" and "[[%artist% - ]%title%]|[%file%]".  
		This command also takes the following defined escape sequences:

          ┌───┬─────────────────┐
          │\  │ backslash       │
          ├───┼─────────────────┤
          │\[ │ left bracket    │
          ├───┼─────────────────┤
          │\] │ right bracket   │
          ├───┼─────────────────┤
          │\a │ alert           │
          ├───┼─────────────────┤
          │\b │ backspace       │
          ├───┼─────────────────┤
          │\e │ escape          │
          ├───┼─────────────────┤
          │\t │ tab             │
          ├───┼─────────────────┤
          │\n │ newline         │
          ├───┼─────────────────┤
          │\v │ vertical tab    │
          ├───┼─────────────────┤
          │\f │ form-feed       │
          ├───┼─────────────────┤
          │\r │ carriage return │
          └───┴─────────────────┘

		If not given, the value of the environment variable MPC_FORMAT is used.

    wait Wait for operation to finish (e.g. database update).

    range=[START]:[END]

	Operate on a range (e.g. when loading a playlist). 
	START is the first index of the range, END is the first index after the range (i.e. excluding).  
	START and END may be omitted, making the range open to that end.  Indexes start with zero.

   -q,   quiet,   no-status
   	Prevents the current song status from being printed on completion of some of the commands.

   verbose
   	Verbose output.

   host=HOST
   	The  MPD  server to connect to.  
	This can be a hostname, IPv4/IPv6 address, an absolute path (i.e. local socket) or a name starting
   	with @ (i.e. an abstract socket, Linux only).

   	To use a password, provide a value of the form "password@host".
   	If not given, the value of the environment variable MPD_HOST is used.

   port=PORT, -p PORT
   	The TCP port of the MPD server to connect to.
   	If not given, the value of the environment variable MPD_PORT is used.


COMMANDS 
	Commands can be used from the least unambiguous prefix (e.g insert or ins).

1) Player Commands :
       consume <on|off> - Toggle consume mode if state (on or off) is not specified.

       crossfade [<seconds>] - Gets and sets the current amount of crossfading between songs (0 disables crossfading).

       current [  wait] - Show the currently playing song.  
		With wait, mpc waits until the song changes (or until playback is started/stopped) 
		before it queries the current song from the server.

       queued - Show the currently queued (next) song.

       mixrampdb [<db>] - Gets and sets the volume level at which songs with MixRamp tags will be overlapped. 
		This disables the fading of the crossfade command and simply  mixes  the  songs.  
		-50.0 will effectively remove any gaps, 0.0 will mash tracks together. 
		The amount of overlap is limited by the audio_buffer_size MPD configuration parameter.

       mixrampdelay [<seconds>] - Gets and sets the current amount of extra delay added to the value computed from the MixRamp tags. 
		(A negative value disables overlapping with MixRamp tagqs and restores the previous value of crossfade).

       next - Starts playing next song on queue.

       pause - Pauses playing.

       play <position> - Starts playing the song-number specified. If none is specified, plays number 1.

       prev - Starts playing previous song.

       random <on|off> - Toggle random mode if state (on or off) is not specified.

       repeat <on|off> - Toggle repeat mode if state (on or off) is not specified.

       replaygain [<off|track|album>] - Sets the replay gain mode. Without arguments, it prints the replay gain mode.

       single <on|off> - Toggle single mode if state (on or off) is not specified.

       seek [+-][<HH:MM:SS>] or <[+-]<0-100>%> - Seeks by hour, minute  or seconds, hours or minutes can be omitted.  
		If seeking by percentage, seeks within the current song in the specified manner.  
		If a + or - is used, the seek is done relative to the current song position. Absolute seeking by default.

       seekthrough [+-][<HH:MM:SS>] - Seeks by hour, minute or seconds, hours or minutes can be omitted, relatively to the current position. 
		If the duration exceeds the  limit  of  the current  song,  the  seek command proceeds to seek through the playlist until 
		the duration is reached.  If a + is used, the seek is forward. If a - is used, the seek is backward. Forward seeking by default.

       stop - Stops playing.

       toggle - Toggles between play and pause. If stopped starts playing.  Does not support start playing at song number (use play).

2) Queue Commands :

       add <file> - Adds a song from the music database to the queue. Can also read input from pipes. Use "mpc add /" to add all files to the queue.

       insert <file> - The insert command works similarly to add except it adds song(s) after the currently playing one, rather than at the end.  
		When random mode is enabled, the new  song  is queued after the current song.

       clear - Empties the queue.

       crop - Remove all songs except for the currently playing song.

       del <songpos> - Removes a queue number from the queue. Can also read input from pipes (0 deletes the current playing song).

       mv, move <from> <to> - Moves song at position <from> to the position <to> in the queue.

       searchplay <type> <query> [<type> <query>]... - Search the queue for a matching song and play it.

       shuffle - Shuffles all songs on the queue.

3) Playlist Commands :

       load <file> - Loads <file> as queue.  The option   range may be used to load only a portion of the file (requires libmpdclient 2.16).

       lsplaylists: - Lists available playlists.

       playlist [<playlist>] - Lists all songs in <playlist>. If no <playlist> is specified, lists all songs in the current queue.

       rm <file> - Deletes a specific playlist.

       save <file> - Saves playlist as <file>.

4) Database Commands :

       listall [<file>] - Lists <file> from database.  If no <file> is specified, lists all songs in the database.

       ls [<directory>] - Lists all files/folders in <directory>. If no <directory> is specified, lists all files in music directory.

       search <type> <query> [<type> <query>]... - Searches for substrings  in  song tags.  Any number of tag type and query combinations can be specified.  
		Possible tag types are: artist, album, title, track, name, genre, date, composer, performer, comment, disc, filename, or any (to match any tag).

       search <expression> - Searches with a filter expression, e.g. mpc search '((artist == "Kraftwerk") AND (title == "Metall  auf  Metall"))'.
       		Check  the  MPD  protocol documentation for details.  This syntax can be used with find andd findadd as well.  
		(Requires libmpdclient 2.16 and MPD 0.21)

       find <type> <query> [<type> <query>]... - Same as search, but tag values must match <query>s exactly instead of doing a substring match.

       findadd <type> <query> [<type> <query>]... - Same as find, but add the result to the current queue instead of printing them.

       list <type> [<type> <query>]... - Return a list of all tags of given tag <type>.  Optional search <type>s/<query>s limit results in a way similar to search.

       stats - Displays statistics about MPD.

       update [  wait] [<path>] - Scans for updated files in the music directory.  
		The optional parameter <path> (relative to the music directory) may limit the scope of the update.
   		With wait, mpc waits until MPD has finished the update.

       rescan [  wait] [<path>] - Like update, but also rescans unmodified files.

5) Mount Commands :

       mount - Lists all mounts.

       mount <uri> <storage> - Create a new mount.

       unmount <uri> - Remove a mount.

6) Sticker Commands :

       The sticker command allows you to get and set song stickers.

       sticker <file> set <key> <value> - Set the value of a song sticker.

       sticker <file> get <key> - Print the value of a song sticker.

       sticker <file> list - List all stickers of a song.

       sticker <file> delete <key> - Delete a song sticker.

       sticker <dir> find <key> - Search for stickers with the specified name, below the specified directory.

7) Output Commands :

       volume [+-]<num> - Sets the volume to <num> (0-100).  If + or - is used, then it adjusts the volume relative to the current volume.

       outputs - Lists all available outputs

       disable [only] <output # or name> [...] - Disables the output(s); a list of one or more names or numbers is required. 
		If "only" is the first argument, all other outputs are enabled.

       enable [only] <output # or name> [...] - Enables the output(s); a list of one or more names or numbers is required. 
		If "only" is the first argument, all other outputs are disabled.

       toggleoutput <output # or name> [...] - Changes the status for the given output(s); a list of one or more names or numbers is required.

8) Client-to-client Commands :

       channels - List the channels that other clients have subscribed to.

       sendmessage <channel> <message> - Send a message to the specified channel.

       waitmessage <channel> - Wait for at least one message on the specified channel.

       subscribe <channel> - Subscribe to the specified channel and continuously receive messages.

9) Other Commands :

       idle [events] - Waits until an event occurs.  Prints a list of event names, one per line.  See the MPD protocol documentation for further information.
		If you specify a list of events, only these events are considered.

       idleloop [events] - Similar to idle, but re-enters "idle" state after events have been printed.
		If you specify a list of events, only these events are considered.

       version - Reports the version of MPD.



ENVIRONMENT VARIABLES
       All environment variables are overridden by any values specified via command line switches.

       MPC_FORMAT Configure the format used to display songs. See option format.

       MPD_HOST   The MPD server to connect to. See option host.

       MPD_PORT   The TCP port of the MPD server to connect to. See option port.

BUGS
       Report bugs on https://github.com/MusicPlayerDaemon/mpc/issues

       Since MPD uses UTF-8, mpc needs to convert characters to the charset used by the local system.  If you  get  character  conversion  errors
       when  you're running mpc you probably need to set up your locale.  This is done by setting any of the LC_CTYPE, LANG or LC_ALL environment
       variables (LC_CTYPE only affects character handling).

SEE ALSO
       mpd(1)

AUTHOR
       See https://raw.githubusercontent.com/MusicPlayerDaemon/mpc/master/AUTHORS

AUTHOR
       Max Kellermann

COPYRIGHT
       Copyright 2003-2018 The Music Player Daemon Project

0.31     Jan 07, 2019    MPC(1)
